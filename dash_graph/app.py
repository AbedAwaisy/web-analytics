# -*- coding: utf-8 -*-
"""1+2+3+4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17mQtkCfpk4qCxctVvHAl52FZCnBUeT1W
"""


import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output, State
import plotly.express as px

# Load the CSV file
file_path = 'final.csv'  # עדכן את הנתיב לפי המיקום המקומי של הקובץ שלך
df = pd.read_csv(file_path)

# Clean the data
df.columns = df.columns.str.strip()
df['תאריך קטיף'] = pd.to_datetime(df['תאריך קטיף'], format='%d/%m/%Y')
df['שנה'] = df['תאריך קטיף'].dt.year
df['חודש'] = df['תאריך קטיף'].dt.month

# Handle NaN values
df['וירוס צבעcolor virus'] = df['וירוס צבעcolor virus'].fillna(0)
df['וירוס שריטותscratches virus'] = df['וירוס שריטותscratches virus'].fillna(0)

# Initialize the Dash app
app = dash.Dash(__name__, suppress_callback_exceptions=True)

# App layout
app.layout = html.Div([
    html.H1("Dashboard"),
    html.Label("Select Sorting Type:"),
    dcc.Dropdown(
        id='sorting-type-dropdown',
        options=[{'label': s, 'value': s} for s in df['סוג מיון'].dropna().unique()],
        placeholder="Select Sorting Type"
    ),
    html.Button('Filter Data', id='filter-button', n_clicks=0),
    html.Div(id='graph-selector-container', style={'display': 'none'}),
    html.Div(id='graph-container')
])

@app.callback(
    [Output('graph-selector-container', 'style'),
     Output('graph-selector-container', 'children')],
    [Input('filter-button', 'n_clicks')],
    [State('sorting-type-dropdown', 'value')]
)
def filter_data(n_clicks, selected_sorting):
    if n_clicks > 0:
        if selected_sorting:
            filtered_df = df[df['סוג מיון'] == selected_sorting]
            if not filtered_df.empty:
                return {'display': 'block'}, dcc.Dropdown(
                    id='graph-selector',
                    options=[
                        {'label': 'Graph 1: Interactive Line Plot', 'value': 'graph1'},
                        {'label': 'Graph 2: Interactive Scatter Plot No Experiment', 'value': 'graph2'},
                        {'label': 'Graph 3: Interactive Scatter Plot with Experiment', 'value': 'graph3'},
                        {'label': 'Graph 4: Interactive Scatter Plot on Harvest Quality', 'value': 'graph4'}
                    ],
                    placeholder="Select a graph"
                )
        return {'display': 'none'}, html.Div("No data available for the selected filters.")
    return {'display': 'none'}, ""

@app.callback(
    Output('graph-container', 'children'),
    [Input('graph-selector', 'value')],
    [State('sorting-type-dropdown', 'value')]
)
def display_graph(selected_graph, selected_sorting):
    if selected_graph == 'graph1':
        return render_graph1(selected_sorting)
    elif selected_graph == 'graph2':
        return render_graph2(selected_sorting)
    elif selected_graph == 'graph3':
        return render_graph3(selected_sorting)
    elif selected_graph == 'graph4':
        return render_graph4(selected_sorting)
    else:
        return html.Div()

def render_graph1(selected_sorting):
    filtered_df = df[df['סוג מיון'] == selected_sorting]
    return html.Div([
        html.H1("Interactive Line Plot"),
        html.Label("Select Y-Axis Column:"),
        dcc.Dropdown(
            id='y-axis-dropdown',
            options=[{'label': col, 'value': col} for col in df.columns[8:18] if pd.notnull(col)],
            value='יצוא אשכולות'  # default value
        ),
        html.Label("Select Experiment:"),
        dcc.Dropdown(
            id='experiment-dropdown',
            options=[{'label': cat, 'value': cat} for cat in filtered_df['סוג בדיקה'].dropna().unique()],
            value=filtered_df['סוג בדיקה'].dropna().unique()[0] if filtered_df['סוג בדיקה'].notna().any() else None  # default value
        ),
        html.Label("Select Herb Name:"),
        dcc.Dropdown(
            id='herb-dropdown',
            options=[]  # Will be populated based on experiment selection
        ),
        html.Label("Select Parcel Size:"),
        dcc.Dropdown(
            id='parcel-dropdown',
            options=[]  # Will be populated based on herb selection
        ),
        dcc.Graph(id='scatter-plot')
    ])

@app.callback(
    [Output('herb-dropdown', 'options'),
     Output('herb-dropdown', 'value')],
    Input('experiment-dropdown', 'value'),
    [State('sorting-type-dropdown', 'value')]
)
def update_herb_options(selected_experiment, selected_sorting):
    filtered_df = df[(df['סוג מיון'] == selected_sorting) & (df['סוג בדיקה'] == selected_experiment)]
    herb_options = [{'label': i, 'value': i} for i in filtered_df['זן'].unique()]
    selected_herb = herb_options[0]['value'] if herb_options else None
    return herb_options, selected_herb

@app.callback(
    [Output('parcel-dropdown', 'options'),
     Output('parcel-dropdown', 'value')],
    [Input('experiment-dropdown', 'value'),
     Input('herb-dropdown', 'value')],
    [State('sorting-type-dropdown', 'value')]
)
def update_parcel_options(selected_experiment, selected_herb, selected_sorting):
    filtered_df = df[(df['סוג מיון'] == selected_sorting) &
                     (df['סוג בדיקה'] == selected_experiment) &
                     (df['זן'] == selected_herb)]
    parcel_options = [{'label': i, 'value': i} for i in filtered_df['גודל חלקה במר'].unique()]
    selected_parcel = parcel_options[0]['value'] if parcel_options else None
    return parcel_options, selected_parcel

@app.callback(
    Output('scatter-plot', 'figure'),
    [Input('y-axis-dropdown', 'value'),
     Input('experiment-dropdown', 'value'),
     Input('herb-dropdown', 'value'),
     Input('parcel-dropdown', 'value')],
    [State('sorting-type-dropdown', 'value')]
)
def update_plot(selected_y_axis, selected_experiment, selected_herb, selected_parcel, selected_sorting):
    df['תאריך קטיף'] = pd.to_datetime(df['תאריך קטיף'], format='%d/%m/%Y')
    filtered_df = df[(df['סוג מיון'] == selected_sorting) &
                     (df['סוג בדיקה'] == selected_experiment) &
                     (df['זן'] == selected_herb) &
                     (df['גודל חלקה במר'] == selected_parcel)]

    filtered_df = filtered_df.sort_values(by='תאריך קטיף')
    filtered_df['תאריך קטיף'] = pd.to_datetime(filtered_df['תאריך קטיף'])
    filtered_df['תאריך קטיף'] = filtered_df['תאריך קטיף'].dt.date

    numeric_columns = [selected_y_axis]

    grouped = filtered_df.groupby(['חלקה', 'תאריך קטיף', 'סוג בדיקה', 'בדיקה'])[numeric_columns].mean().reset_index()
    grouped1 = grouped.groupby(['תאריך קטיף', 'סוג בדיקה', 'בדיקה'])[numeric_columns].mean().reset_index()

    if not grouped1.empty:
        fig = px.line(
            grouped1,
            x='תאריך קטיף',
            y=selected_y_axis,
            color='בדיקה',
            line_dash='בדיקה',
            title=f'Experiment: {selected_experiment}, Herb: {selected_herb}, Parcel Size: {selected_parcel}',
            hover_data={'תאריך קטיף': True, selected_y_axis: True, 'בדיקה': True}
        )
        fig.update_layout(xaxis_title='Harvest Date', yaxis_title='Harvest Weight', legend_title='בדיקה')
    else:
        fig = px.line(title="No data available for the selected filters")

    return fig

def render_graph2(selected_sorting):
    filtered_df = df[df['סוג מיון'] == selected_sorting]
    return html.Div([
        html.H1("Interactive Scatter Plot on chemical"),
        html.Label("Select Parcel Size:"),
        dcc.Dropdown(
            id='parcel-dropdown2',
            options=[{'label': str(cat), 'value': cat} for cat in filtered_df['גודל חלקה במר'].unique()]
        ),
        html.Label("Select Herb Name:"),
        dcc.Dropdown(
            id='herb-dropdown2',
            options=[],
            multi=True
        ),
        dcc.Graph(id='scatter-plot2')
    ])

@app.callback(
    [Output('herb-dropdown2', 'options'),
     Output('herb-dropdown2', 'value')],
    [Input('parcel-dropdown2', 'value')],
    [State('sorting-type-dropdown', 'value')]
)
def update_herb_options2(selected_parcel, selected_sorting):
    filtered_df = df[(df['סוג מיון'] == selected_sorting) & (df['גודל חלקה במר'] == selected_parcel)]
    herb_options = [{'label': str(i), 'value': i} for i in filtered_df['זן'].unique()]
    return herb_options, None

@app.callback(
    Output('scatter-plot2', 'figure'),
    [Input('parcel-dropdown2', 'value'),
     Input('herb-dropdown2', 'value')],
    [State('sorting-type-dropdown', 'value')]
)
def update_plot2(selected_parcel, selected_herb, selected_sorting):
    if selected_parcel is None:
        return {}

    filtered_df = df[(df['סוג מיון'] == selected_sorting) &
                     (df['גודל חלקה במר'] == selected_parcel)]

    if selected_herb:
        filtered_df = filtered_df[filtered_df['זן'].isin(selected_herb)]

    filtered_df['תאריך קטיף'] = pd.to_datetime(filtered_df['תאריך קטיף'], format='%d/%m/%Y')
    filtered_df = filtered_df.sort_values(by='תאריך קטיף')

    if filtered_df.empty:
        return {}

    fig = px.scatter(
        filtered_df,
        x='TSS',
        y='TA',
        color='זן',
        title=f'TSS and TA across different Herbs',
        hover_data={'זן': True}
    )
    fig.update_layout(xaxis_title='TSS', yaxis_title='TA', legend_title='זן')

    return fig

def render_graph3(selected_sorting):
    filtered_df = df[df['סוג מיון'] == selected_sorting]
    return html.Div([
        html.H1("Interactive Scatter Plot with Experiment"),
        html.Label("Select Experiment:"),
        dcc.Dropdown(
            id='experiment-dropdown3',
            options=[{'label': cat, 'value': cat} for cat in filtered_df['סוג בדיקה'].dropna().unique()],
            value=filtered_df['סוג בדיקה'].dropna().unique()[0] if filtered_df['סוג בדיקה'].notna().any() else None  # default value
        ),
        html.Label("Select Parcel Size:"),
        dcc.Dropdown(
            id='parcel-dropdown3',
            options=[]  # Will be populated based on experiment selection
        ),
        html.Label("Select Herb Name:"),
        dcc.Dropdown(
            id='herb-dropdown3',
            options=[]  # Will be populated based on parcel selection
        ),
        dcc.Graph(id='scatter-plot3')
    ])

@app.callback(
    [Output('parcel-dropdown3', 'options'),
     Output('parcel-dropdown3', 'value')],
    Input('experiment-dropdown3', 'value')
)
def update_parcel_options3(selected_experiment):
    filtered_df = df[df['סוג בדיקה'] == selected_experiment]
    parcel_options = [{'label': i, 'value': i} for i in filtered_df['גודל חלקה במר'].unique()]
    selected_parcel = parcel_options[0]['value'] if parcel_options else None
    return parcel_options, selected_parcel

@app.callback(
    [Output('herb-dropdown3', 'options'),
     Output('herb-dropdown3', 'value')],
    [Input('experiment-dropdown3', 'value'),
     Input('parcel-dropdown3', 'value')]
)
def update_herb_options3(selected_experiment, selected_parcel):
    filtered_df = df[(df['סוג בדיקה'] == selected_experiment) & (df['גודל חלקה במר'] == selected_parcel)]
    herb_options = [{'label': i, 'value': i} for i in filtered_df['זן'].unique()]
    selected_herb = herb_options[0]['value'] if herb_options else None
    return herb_options, selected_herb

@app.callback(
    Output('scatter-plot3', 'figure'),
    [Input('experiment-dropdown3', 'value'),
     Input('parcel-dropdown3', 'value'),
     Input('herb-dropdown3', 'value')]
)
def update_plot3(selected_experiment, selected_parcel, selected_herb):
    filtered_df = df[(df['סוג בדיקה'] == selected_experiment) &
                     (df['גודל חלקה במר'] == selected_parcel) &
                     (df['זן'] == selected_herb)]

    filtered_df['תאריך קטיף'] = pd.to_datetime(filtered_df['תאריך קטיף'], format='%d/%m/%Y')
    filtered_df = filtered_df.sort_values(by='תאריך קטיף')

    if filtered_df.empty:
        return {}

    fig = px.scatter(
        filtered_df,
        x='TSS',
        y='TA',
        color='בדיקה',
        title=f'TSS and TA across different experiment parameters from Experiment {selected_experiment}',
        hover_data={'בדיקה': True}
    )
    fig.update_layout(xaxis_title='TSS', yaxis_title='TA', legend_title='בדיקה')

    return fig

def render_graph4(selected_sorting):
    filtered_df = df[df['סוג מיון'] == selected_sorting]
    return html.Div([
        html.H1("Interactive Scatter Plot on Harvest Quality"),
        html.Label("Select X-Axis Column:"),
        dcc.Dropdown(
            id='x-axis-dropdown4',
            options=[{'label': col, 'value': col} for col in df.columns[27:33] if col != 'חסריםmissing'],
            value='רקבון שזרהvine rot'  # default value
        ),
        html.Label("Select Parcel Size:"),
        dcc.Dropdown(
            id='parcel-dropdown4',
            options=[{'label': i, 'value': i} for i in df['גודל חלקה במר'].unique() if not pd.isna(i)]
        ),
        html.Label("Select Herb Name:"),
        dcc.Dropdown(
            id='herb-dropdown4',
            options=[],
            multi=True
        ),
        dcc.Graph(id='scatter-plot4')
    ])

@app.callback(
    [Output('herb-dropdown4', 'options'),
     Output('herb-dropdown4', 'value')],
    Input('parcel-dropdown4', 'value')
)
def update_herb_options4(selected_parcel):
    if selected_parcel:
        filtered_df = df[df['גודל חלקה במר'] == selected_parcel]
        herb_options = [{'label': i, 'value': i} for i in filtered_df['זן'].unique()]
        selected_herb = [herb_options[0]['value']] if herb_options else None
    else:
        herb_options = []
        selected_herb = None
    return herb_options, selected_herb

@app.callback(
    Output('scatter-plot4', 'figure'),
    [Input('x-axis-dropdown4', 'value'),
     Input('parcel-dropdown4', 'value'),
     Input('herb-dropdown4', 'value')]
)
def update_plot4(selected_x_axis, selected_parcel, selected_herbs):
    if selected_x_axis and selected_parcel and selected_herbs:
        filtered_df = df[(df['גודל חלקה במר'] == selected_parcel) &
                         (df['זן'].isin(selected_herbs))]

        if not filtered_df.empty:
            filtered_df['תאריך קטיף'] = pd.to_datetime(filtered_df['תאריך קטיף'], format='%d/%m/%Y', errors='coerce')
            filtered_df['תאריך קטיף'] = filtered_df['תאריך קטיף'].dt.date
            filtered_df['Avg Fruit Size'] = round(filtered_df['משקל weight'] / filtered_df['מספר פרות'], 2)

            fig = px.scatter(filtered_df, x=selected_x_axis, y='Avg Fruit Size', color='זן',
                             title=f'The Effect of {selected_x_axis} value on Average Fruit Size across multiple Herbs',
                             hover_data={selected_x_axis: True, 'Avg Fruit Size': True, 'זן': True})
            fig.update_layout(xaxis_title=f'{selected_x_axis} Value', yaxis_title=f'Average Fruit Size in (Grams)', legend_title='זן')
        else:
            fig = px.scatter(title="No data available for the selected filters")
    else:
        fig = px.scatter(title="Select X-Axis, Parcel Size, and Herb Name(s)")

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)